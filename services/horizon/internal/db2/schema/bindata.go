// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// migrations/4_add_protocol_version.sql
// migrations/5_create_trades_table.sql
// migrations/6_create_assets_table.sql
// migrations/7_modify_trades_table.sql
// migrations/8_add_aggregators.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5c\x6d\x6f\xdb\x38\xd6\xfd\x9e\x5f\x41\x0c\x0a\xd8\x06\x9c\x20\x76\x9a\x34\x71\x9e\x14\x70\x1d\x25\x35\x9a\xc8\xad\x2d\x3f\x9d\x62\x30\x20\x68\x89\xb6\xb5\x95\x45\x95\xa4\xd3\x64\x16\xfb\xdf\x17\x7a\xb3\xde\x48\x51\xb2\x95\x76\xbf\xd5\xd2\xd5\xe1\x39\x97\x97\xbc\xe4\x25\xd3\xe3\xe3\xa3\xe3\x63\xf0\x99\x30\xbe\xa2\x78\xf6\xe5\x01\x58\x88\xa3\x05\x62\x18\x58\xdb\x8d\x77\x74\x7c\x7c\xe4\xbf\xbf\xdd\x6e\x3c\x6c\x81\x25\x25\x9b\xc4\xe0\x09\x53\x66\x13\x17\x5c\x9d\x5c\x9c\x9c\xa7\xac\x16\x2f\xc0\x5b\x41\xff\xf3\x9c\xc9\xd1\x4c\x33\x00\xe3\x88\xe3\x0d\x76\x39\xe4\xf6\x06\x93\x2d\x07\x37\xe0\xf4\x3a\x78\xe5\x10\xf3\x7b\xf1\xa9\xe9\xd8\xbe\x35\x76\x4d\x62\xd9\xee\x0a\xdc\x80\xd6\xdc\xb8\xbb\x6c\x5d\xc7\x70\xae\x85\xa8\x05\x4d\xe2\x2e\x09\xdd\xd8\xee\x0a\x32\x4e\x6d\x77\xc5\xc0\x0d\x20\x6e\x84\xb1\xc6\xe6\x77\xb8\xdc\xba\x26\xb7\x89\x0b\x17\xc4\xb2\xb1\xff\x7e\x89\x1c\x86\x33\xcd\x6c\x6c\x17\x6e\x30\x63\x68\x15\x18\xfc\x44\xd4\xb5\xdd\xd5\x75\xc4\x1d\x23\x6a\xae\xa1\x87\xf8\x1a\xdc\x00\x6f\xbb\x70\x6c\xb3\xeb\x8b\x35\x11\x47\x0e\xf1\xcd\x42\x7f\xea\x68\x83\x07\x60\x69\x53\xc6\x21\x5a\xad\xda\xc8\x7d\xc1\x4e\xa0\xba\x0b\x92\x7f\x77\xae\x81\xf1\xe2\xe1\x01\xb8\x9b\xeb\x23\x63\x3c\xd1\xaf\xc1\xcc\x5c\xe3\x0d\x1a\x44\xd8\xd7\x60\xf2\xd3\xc5\x74\x00\x8e\x83\x8e\x18\x4d\xb5\xa1\xa1\xed\xac\xd5\xf8\x60\xaa\x19\xf3\xa9\x3e\x4b\x3d\x3b\x02\x00\x80\x87\xa1\x7e\x3f\x1f\xde\x6b\x80\xfd\x70\xc0\xf8\xf1\x71\x6e\x0c\x3f\x3c\x68\x60\x66\x4c\xc7\x23\x23\xb0\x18\xce\xc0\x1b\xf8\x06\xcc\xb4\x07\x6d\x64\x80\x37\x3d\xff\xd7\xf5\x51\x56\x9e\x83\x5e\x55\x9d\x0a\xbe\x31\x71\x7d\x91\xb8\xc0\xb7\x6d\x81\x9a\xe1\xfd\xfd\x54\xbb\x1f\x1a\x5a\x35\x39\x3b\xf3\x22\x22\x68\x07\x6c\x66\xbe\x62\x3f\x16\xe3\xde\xec\x86\x8f\x8d\x6f\x9f\x35\x70\x93\x56\xd7\x11\xf5\x40\xa3\x1c\xf3\x80\x39\x8a\x71\x97\x94\x33\xf4\x47\x8a\x85\x97\x68\xeb\x70\xc8\xd1\xc2\xc1\xcc\x43\x26\xf6\xc7\x6d\xeb\x3a\xfb\xf6\xa7\xcd\xd7\x90\xd8\x56\x6a\x28\x66\xf4\xad\x08\xf5\xe0\xc6\x5e\x51\xe4\x0f\x5b\x16\xcb\x0b\x3a\xb4\x9a\xb4\xb0\xef\x73\x38\x91\x2a\xdb\x02\x1c\x3f\x73\xa0\x4f\x0c\xa0\xcf\x1f\x1e\x42\x55\xc8\xf3\x1c\x1b\x5b\x10\x71\xe0\x4f\x45\x8c\xa3\x8d\x07\x7c\xa2\xc1\x4f\xf0\x0f\x71\x71\xb1\x23\xd6\x36\xe3\x84\xbe\x40\x64\x9a\x64\xeb\x72\x06\x6d\x0b\x32\xfc\x23\x26\x3c\xd3\xbe\xcc\x35\x7d\x54\x91\x73\x6c\x2d\x43\x8d\x9c\x3f\x9c\x1a\xe0\xeb\xd8\xf8\x08\x7a\xc1\x83\xb1\x3e\x9a\x6a\x8f\x9a\x6e\x80\x0f\xdf\xa2\x47\xfa\x04\x3c\x8e\xf5\xff\x1f\x3e\xcc\xb5\xdd\xef\xe1\x9f\xc9\xef\xd1\x70\xf4\x51\x03\x3d\x95\x98\xbd\xdd\x9e\x07\x4a\xfc\xbe\xb0\x57\xb6\xcb\xc1\xad\x76\x37\x9c\x3f\x18\xc0\xc5\xcf\xfc\x09\x39\xed\x96\x44\x71\x6b\x30\xa0\x78\x65\x3a\x88\xb1\x4e\xbe\xbb\x2c\x8b\x62\xc6\x80\xb9\x46\x14\x99\x1c\x53\xf0\x84\xe8\x8b\xed\xae\xda\x17\x6f\x3b\x25\x1d\xc5\x18\x6e\x42\x59\x00\x93\xe8\xb2\x5d\x8e\x57\x98\xe6\x39\xfa\x56\x90\xbf\x78\x58\x4c\x53\x68\x6e\x12\x4b\x64\xde\xeb\x8b\xcd\x6d\xc6\xb6\x98\x0a\x3e\x38\xbf\x48\x3e\x50\xf9\xa3\xe1\xb0\x4d\x63\xfe\xb2\xa0\x2d\x13\x02\x26\x5f\x75\xed\x16\x7c\xf8\xa6\x50\x34\x7c\x30\xb4\xa9\x42\xd0\x0e\x2b\xf7\xfa\xc4\xb6\x64\xdc\xf0\x72\x89\xcd\x06\xa2\x2e\xc2\x89\xc2\x2e\x37\x66\x60\x32\xbc\xb2\x71\x12\xdb\x11\x0f\x87\xf3\xa0\xd4\xf2\x0f\x42\x2d\x4c\xff\x90\x44\x73\x10\xc7\xe2\x57\x16\xe6\xc8\x76\x18\xf8\x17\x23\xee\x42\x1e\x6c\x0e\xb6\x56\x98\x1e\xee\x87\x08\x27\xf2\x03\xc3\x3f\xb6\xd8\x35\x65\xdc\x42\x63\xb8\x46\x6c\x5d\x69\x14\x7a\x14\x3f\xd9\x64\xcb\xa0\xf2\xc3\xc8\x2d\x14\xb9\x0c\x85\xeb\xcb\xa0\x23\x76\x3c\xe2\x59\xee\x34\xd7\x42\xd2\x11\xd5\xec\x4d\x87\x30\x51\x62\xf2\x57\xcb\xbb\xdc\x94\xff\x86\x62\xc4\x95\x1f\x85\xb6\x5b\xcf\xaa\x6c\xbb\x0b\x9d\xe8\xe7\xc6\x23\x94\x63\x0a\xe3\x05\x7f\x5e\x4b\x2f\x1f\x44\x84\x23\x07\x9a\xc4\x76\x99\x38\x06\x97\x18\x43\x8f\x10\x47\xfc\xd6\xdf\x7f\xc0\x25\x96\xf5\x75\xf0\x9a\x62\x86\xe9\x93\xcc\x64\x83\x9e\x21\x7f\x86\xfe\xd4\xc9\xec\x7f\x64\x56\x1e\x25\x9c\x98\xc4\x91\xea\x3a\xad\x30\xb7\x26\xfd\xec\x21\xca\x6d\xd3\xf6\x50\x13\x59\x55\x0c\xab\xca\x45\xd5\x67\x01\xf5\xbc\x52\x57\x72\xb3\xe9\xa5\xb4\x8d\x5f\x95\x6e\x6a\x09\x3d\x30\xfd\x94\xb6\x55\x4c\x47\x62\xf3\x92\xf4\xb4\xfb\xa0\xc1\xd8\x2c\xae\xf9\x72\xf3\x40\x6a\xd6\x94\xd9\x04\x2b\x72\x33\x94\x12\x64\xa6\x03\x13\x53\xf8\x88\x91\x2d\x35\x71\x1c\xdd\x92\x94\x10\x0f\xf3\x56\x6b\x30\x28\x58\x54\x18\x07\x9c\x22\x0b\x1f\xee\xce\x10\x26\x97\xef\x0f\xcd\xe3\x51\x5e\xdb\x27\xab\x90\xe5\x12\x53\x69\xb3\xc1\xec\xab\x5a\x8d\x84\x46\xe1\xd2\xb5\xd4\x64\x13\x74\x8f\xd0\x20\x68\x01\x53\x65\x5b\x3b\xbb\xd2\xe6\x76\x56\x25\x2d\x06\x94\x6c\x06\x19\x76\x1c\x4c\xc1\x82\x10\x07\x23\x37\x7c\x37\x9a\xe8\x33\x63\x3a\x1c\xeb\x46\xae\xdf\x60\x4a\x08\x0c\x2a\x51\x60\xf4\x51\x1b\x7d\x02\xed\x76\x5a\xe2\x7b\x70\xda\xe9\xa8\xa0\x44\x9f\xc7\xaa\xfe\xaf\x20\xb4\x02\x5e\x46\x74\x0e\x3e\xe7\x91\x80\x60\x69\xac\xef\x86\x72\xa3\x89\x4e\x06\x5c\x35\xd5\x55\x99\x63\x0e\x49\x76\x32\x7e\xcd\xa6\x3b\x45\x2b\xbf\x2a\xe1\xd5\x14\x7b\x60\xca\x53\xb4\x56\x4c\x7a\xb2\x0f\x4a\xd2\x5e\xea\x93\x46\x63\x35\x8e\xcf\x34\xa5\xca\xbb\x8f\x68\x72\x56\xec\x69\xaa\x66\xc6\xf2\x24\x27\xb4\x4d\x9a\x96\x2f\xcf\x91\x74\xe8\xc9\xb6\x36\xbf\x65\x73\xc2\x9f\x21\x76\x9f\xb0\x43\x3c\x2c\x2a\xf8\xf1\x67\x7f\xab\xb0\x75\xb8\xe4\xe5\x06\x73\x24\x79\xe5\x7b\x41\xf6\x9a\xd9\x2b\x17\xf1\x2d\xc5\xa2\xda\xd4\xd5\x45\xe7\xaf\xbf\x93\xd5\xc5\xbf\xff\x23\x5a\x5f\xfc\xf5\x77\x7e\xcf\x82\x37\x44\x52\x46\x4a\xb0\x5c\xe2\xe2\xd2\xd5\x4a\x82\x55\x84\x89\x94\xd9\x1b\x0c\x17\x64\xeb\x5a\xcc\xef\xb9\x4b\x8a\xdc\x55\x59\xd1\x33\x2c\x82\xd9\x56\x3c\x7a\x22\x2e\x95\x86\x7c\x38\x7c\x26\xfa\x43\xbe\x8e\x02\xc2\xf7\xa3\xc9\xc3\xfc\x51\xf7\xbb\x74\xa6\x19\x25\x05\xc3\x74\x69\x26\x5d\x2e\xac\xb7\x70\x6f\x4e\x84\x04\xbf\x96\xa8\xd2\x05\x7f\x15\x91\xd2\xcc\xd9\x98\x4c\x69\x0b\xb5\x84\x2a\xa6\x79\xb1\xd4\x5b\xc4\x11\x58\x12\x5a\xe1\xac\x00\xdc\x0e\x8d\xa1\x42\xe2\x58\x9f\x69\x53\x03\x8c\x75\x63\x52\x38\x2f\x08\xb2\xe3\x0c\xb4\x5b\x3d\x68\xbb\x36\xb7\x91\x03\x59\x80\x75\xc2\x7e\x38\xad\x2e\x68\xf5\x4f\x7b\xef\x8e\x7b\xa7\xc7\xfd\x0b\xd0\xeb\x0d\x4e\xcf\x06\xfd\xf3\x93\xde\xe5\xe5\xd9\xc5\xd9\xf1\xe9\xbb\x56\xe7\xba\x1a\x7a\x1f\xda\xae\x85\x9f\xb3\x2e\x58\xbc\x40\x4e\x6c\xab\xb4\xa5\xab\xfe\xf9\xf9\x55\x9d\x96\xce\xe0\x96\xe1\xdd\x14\x0f\x6d\x17\xe6\x2b\xef\xe5\xed\xbd\xbd\x3c\x7b\x5b\xa7\xbd\xb7\x10\x59\x16\xcc\x57\x53\xca\xda\xe8\x9f\xf6\x7a\xfd\x5a\x9a\xce\x61\x98\x4f\xe2\xa5\x6d\x70\xf4\x54\xde\xc4\xc5\xd5\x69\xbf\x4e\x13\x17\x71\x13\xd1\x74\xa3\x6e\xa2\xd7\xbb\xb8\xac\xd5\xc4\x3b\xb8\x21\x96\xbd\x7c\xa9\xae\xa2\x77\x75\xf6\xf6\xb2\x4e\x13\x97\x41\x67\xa0\xd5\x8a\xe2\x15\xe2\x84\x96\xf6\x75\xbf\xdf\xbb\x3c\x8d\xa3\x58\x32\xf4\x4a\x0f\x8c\xaa\x8c\xbd\xbd\x0e\xd3\xfc\x29\x45\x81\x1b\x9d\xf0\x26\x07\xf4\x27\x0c\x97\x1f\x34\x75\x41\xaf\x1b\x1e\x45\x56\x90\x5b\x3c\x43\x3a\x40\x6c\xe9\xb9\x45\x23\x52\x33\x29\xb2\x8e\x50\xd1\xb9\x45\x1d\xa5\x12\x58\xd1\x31\x40\x03\xb0\x15\xca\xad\xfb\x77\x53\xbd\x7a\x5f\x13\xdd\x56\xbe\x08\xa8\xd3\x8d\x92\xfa\x5e\x03\x2e\x17\x94\xb9\x9a\x41\x55\x17\x14\xf6\xef\xca\xba\x3b\xd9\x26\x3a\x53\xb5\xd0\xa9\xd3\x9d\xd2\x7d\x6b\x7d\x97\xe4\x53\x45\xee\x37\xf4\xbe\xe3\x97\xb8\x89\xa4\x96\x54\x77\xcd\x98\x43\x0d\xaf\xe2\xdc\xde\xa6\xab\x53\xa2\x86\xc1\xe7\xe9\xf8\x71\x38\xfd\x06\x3e\x69\xdf\x40\xdb\xb6\x54\xfb\x90\xdc\x7c\x97\x9c\xa6\xc3\xe4\x1c\x1e\xa6\x0f\xcd\x61\x23\xea\xb2\xcd\x8a\xc4\xed\x45\x0c\xcc\xf5\xf1\x97\xb9\x06\xda\x89\x79\x37\x75\xa1\xa0\x9b\x39\xfe\xaf\xe9\x9a\x66\xba\xb5\xb6\xf0\x5a\x9d\x2a\xd9\x47\x29\x66\xc7\x66\x95\x89\x1b\x29\x53\x5a\x42\xab\xb2\x72\xe9\xd6\x4a\x39\x99\x34\xab\x5e\xd6\x4c\x99\xfe\x52\x6a\x4a\x0f\x84\x21\xbd\x78\x89\xa2\x3a\x96\x32\xd6\x6f\xb5\x3f\xab\x15\xe5\x02\xd3\x3c\x0e\x98\xe8\xf9\x01\x31\x9f\x8d\xf5\x7b\xb0\xe0\x14\xe3\x78\x84\x49\x46\xd2\x62\xb7\x56\xdc\x9b\x4e\x02\x91\x66\x92\xa9\x18\x66\xf9\x84\xc6\xdd\x42\x49\x4e\x44\x6e\x8d\xd8\xfa\x10\x66\x41\x65\xb2\x12\xad\x7c\x3d\x53\xc4\x26\x5c\xda\x1d\xc2\x27\x44\xa8\xc6\x28\x57\x2c\xed\x16\xeb\xa2\xc2\x41\x06\xb1\x1f\x1b\xc1\xfb\x3d\x98\x46\xf3\x72\x48\x38\x07\x97\xa6\x1d\x5f\xd6\xc9\x30\x16\x9d\xe1\x75\xe3\xf3\x3a\x19\xd9\xa4\x68\x73\x20\x4d\xdb\xaa\x4c\x30\x39\x0f\xe9\x0a\x0f\x1e\x15\xa4\x89\x07\xbd\xa6\x78\x47\x58\x69\xea\x92\xe4\xb0\x97\x12\xb1\x00\xfe\xdc\x9c\x80\x08\x4b\x12\xd3\x7b\x4a\xc8\x1e\x6e\x15\x45\x10\xcf\x8f\xca\x35\xd9\x4b\x43\x44\x3e\xc1\xd8\xd7\xf9\xe5\x8e\xde\xdd\xb1\xf2\xa7\xea\xc3\x7d\x9d\x85\x4b\x53\x8e\x2f\x8c\x65\x38\x8a\x19\xa5\xfd\xda\x14\xad\x02\x66\xb5\xe9\x4d\x44\x90\x87\x5d\xc2\x0f\xe9\xd6\x04\x63\xff\x90\x54\x85\x1f\xa7\x56\x30\x2b\x2e\x97\x07\xa4\x83\x0c\x4a\x8e\xab\x85\x73\xcc\xe2\xbb\x09\x62\x2e\xf1\x91\xb6\x43\xc8\xf7\xad\x77\x18\xa3\x2c\x96\x8a\x57\xe1\x6c\x5e\xc8\xcf\x43\x36\x0d\xfe\x04\xa6\x11\x86\x79\x34\x15\xc7\xcc\x7d\x82\x6e\xe1\x3a\x41\xb7\x70\x67\x44\x22\xa2\x81\xd1\x12\xe1\xa8\x18\xd7\xcc\x49\x3e\x6a\x63\xde\xad\xe1\x58\xa5\xdf\xc2\xc2\x7f\xa1\x2a\x49\x5c\x18\x5d\x70\x3f\xd4\xa1\xca\x06\x32\xab\xe3\xf8\xc2\x7e\x76\x3d\x1a\x1a\xd6\xe0\x7e\x78\x1c\x94\x61\xab\x19\x0b\x46\x59\x16\x30\x5a\xfb\xf8\x78\xfe\x6e\x7a\xef\x78\x28\x45\x55\x2e\xb6\x7c\x23\x05\xd1\x28\x73\xf9\x90\xbb\x20\x6a\x88\xad\x08\x5a\x99\x34\xab\x46\x72\x0a\xbc\xe9\x60\xc8\x40\xef\x93\xe5\xe5\x70\xb9\xdb\xcc\xcd\x3b\xba\x70\x5f\x5a\x49\x3f\xf7\x41\x75\x31\xa9\xeb\xeb\xaf\xe6\xff\xf4\x15\x79\x95\x92\x94\x6d\x75\x11\xa2\xcb\xf8\xaf\xa6\x46\x78\xf3\x5f\x25\x4b\xf4\x51\x75\x7d\xf1\xd6\xf5\xd5\x34\xed\x6e\xf3\xa8\x74\x48\x6b\x0c\x59\xe8\xe4\x2c\xe1\x35\x86\x76\x1e\x5d\xb8\xed\xa8\x3b\xc0\xb3\xa0\xd9\x85\x6b\x43\x23\xbc\xac\x89\x2a\x1a\x14\xab\xe9\xd2\xc6\x9a\x4b\x5f\x45\xe0\x4a\xdc\xd5\x49\x2c\xbd\xc5\x79\x8d\xb0\x29\xe2\xef\xbd\xc1\x0a\x16\x71\xbb\x44\x1e\xd7\x75\xe0\x82\x90\xef\x7b\x7b\xb9\x04\x53\xb9\x44\x68\xb7\xe3\x2b\xec\xc7\xef\xdf\x83\x16\x23\x8e\x95\x3a\x35\x68\x0d\x06\x1c\x3f\xf3\x4e\xa7\x0b\xe4\x86\x26\xb1\xaa\x19\x86\x15\x50\xb9\xe9\x82\x6c\x57\x6b\x5e\xa9\xf9\x8c\x69\x39\x81\x8c\x69\x8e\x42\x07\x7c\xfd\xa8\x4d\xb5\x30\xc8\xc0\x0d\x38\x3b\x53\xdc\xb8\x17\xdf\xc0\xde\x95\x4f\xe0\x32\x55\x21\xbf\xfb\xd4\x4c\x91\xdc\xc2\xaa\x92\xb8\x8c\x09\xb8\x9b\x4c\xb5\xf1\xbd\x1e\x16\xc4\x73\x16\x1d\x30\xd5\xee\xb4\xa9\xa6\x8f\xb4\x59\x61\xb9\xab\x38\x3f\x90\x7a\x22\xda\xd0\xfd\x76\x3f\xa4\x79\x88\xbc\x10\xef\x95\x85\x3e\x08\x4a\xf8\xf5\x3d\x50\xfc\xab\x81\xdf\xe8\x06\x09\x99\xac\x2f\x8a\x46\x0d\x07\x45\x7e\xa3\xff\xbf\xe0\x10\x79\x68\x14\x2a\x29\x55\xa3\x43\xf6\xbf\x9c\x00\x93\x6c\x3c\x07\x73\x1c\x68\xf8\x6f\x00\x00\x00\xff\xff\xfc\x93\xc1\xdd\x12\x45\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 17682, mode: os.FileMode(420), modTime: time.Unix(1510337983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x5f\x6f\xdb\xc8\x11\x7f\xf7\xa7\x18\xdc\x8b\x6c\xd4\x6a\x2f\xb8\xe2\x70\x95\xe1\x03\x14\x99\x69\x84\xca\x54\x22\x51\x4d\x82\xc3\x61\xb1\x22\x47\xd4\xd6\xe4\x2e\xb3\xbb\x74\xa4\x2b\xfa\xdd\x0b\x52\x24\xc5\xff\xa4\x1c\xc9\xf7\x28\xee\xec\xcc\xfc\x66\x66\x7f\x33\x5c\x6a\x38\x84\xbf\xf8\xcc\x95\x54\x23\xac\x82\xab\xe1\xf0\x6a\x38\x84\x0f\x42\x69\x57\xe2\xf2\xe3\x0c\x1c\xaa\xe9\x9a\x2a\x04\x27\xf4\xe3\xe5\xab\xa5\x61\x81\xd2\x54\xa3\x8f\x5c\x13\xcd\x7c\x14\xa1\x86\x7b\xf8\xf1\x2e\x5e\xf2\x84\xfd\x54\x7d\x6a\x7b\x2c\x92\x46\x6e\x0b\x87\x71\x17\xee\x61\xb0\xb2\xde\xfd\x32\xb8\x4b\xd5\x71\x87\x4a\x87\xd8\x82\x6f\x84\xf4\x19\x77\x89\xd2\x92\x71\x57\xc1\x3d\x08\x9e\xe8\xd8\xa2\xfd\x44\x36\x21\xb7\x35\x13\x9c\xac\x85\xc3\x30\x5a\xdf\x50\x4f\x61\xc1\x8c\xcf\x38\xf1\x51\x29\xea\xc6\x02\xdf\xa8\xe4\x8c\xbb\x77\x57\x09\x3c\x93\xfa\x38\x82\xc0\x0b\x5c\xf5\xd5\xbb\x03\x6b\x1f\xe0\x08\x8c\xcf\x96\x61\x2e\xa7\x73\xf3\x0e\x96\xf6\x16\x7d\x3a\x82\xe1\x1d\xcc\xbf\x71\x94\x23\x18\xc6\xc8\x27\x0b\x63\x6c\x19\x47\x49\x98\xbe\x03\x73\x6e\x81\xf1\x79\xba\xb4\x96\xa9\x42\xf8\x34\xb5\xde\xc3\x72\xf2\xde\x78\x1c\x43\xe0\x12\x9b\x6a\xea\x89\xc8\x7a\xc1\xfc\x51\x4b\xc9\x91\xc9\xfc\xf1\xd1\x30\xad\x16\x37\x0e\x02\x30\x37\xab\x4a\x60\xba\x84\xc1\x87\xd9\xdf\x02\x37\x4a\x5e\x20\x85\x8d\x4e\x28\xa9\x07\x1e\xe5\x6e\x48\x5d\x1c\x94\xfd\xd8\x2a\x2d\x24\x9e\x2f\x0a\x07\x7d\xc5\x20\x84\x6b\x8f\xd9\xcd\x01\x28\xba\xf0\x32\xfc\x89\xd9\x08\x7e\x54\xb2\xa0\xf7\x01\xc2\x46\x48\x88\x9e\x47\x15\xa7\x50\x2b\x10\x1b\xb8\x7e\xc2\xfd\x2d\x3c\x53\x2f\xc4\x1b\x08\x28\x93\x2a\x0e\x49\x5c\x86\x48\xa5\xbd\x25\x01\xd5\x5b\xb8\x4f\xbc\xbe\x2d\xa6\x30\x12\x73\x70\x43\x43\x4f\x13\x4d\xd7\x1e\xaa\x80\xda\x18\x95\xf3\xa0\xb4\xfa\x8d\xe9\x2d\x11\xcc\xc9\x55\x68\x31\xee\x2c\xf2\x6c\x4f\xa8\x6d\x8b\x90\x6b\x95\xc2\xb7\xc6\x6f\x67\xc6\x11\x7c\x12\xbb\x2c\x02\x77\x60\x65\x66\x47\xf9\x7c\xc4\xfb\x2a\x5a\xe1\xfa\x0a\x00\x80\x39\xb0\x66\x2e\xe3\x3a\xce\x94\xb9\x9a\xcd\x6e\xe3\xe7\xd4\x71\x24\x2a\x05\xf6\x96\x4a\x6a\x6b\x94\xf0\x4c\xe5\x9e\x71\xf7\xfa\xe7\xbf\xdf\x5c\xdd\x54\x6a\x25\xd1\x8e\x9b\x0d\xda\xe7\x76\x39\x51\x9a\x78\x5c\x02\x42\x9a\x10\xa4\x72\x22\x40\x49\x63\x5e\x68\x92\xfc\x41\x48\x07\xe5\x0f\xc0\xb8\x46\x17\x65\x69\x35\xae\x97\xfa\x25\x07\x35\x65\x9e\x82\xff\x28\xc1\xd7\xcd\x41\xf1\xd0\x71\x51\x9e\x39\x28\x89\xd2\x24\x28\x0a\xbf\x86\xc8\xed\x26\x47\x0f\xc2\x64\x4b\xd5\xb6\x3e\xa3\x25\xf9\x40\xe2\x33\x13\xa1\x22\x9d\x1b\x93\x18\x49\xca\x15\x3d\xb0\x6f\x9c\x95\xcc\x8f\x07\xe3\xdd\x78\x35\xb3\xe0\xc7\x92\x85\x63\x56\xfa\xc9\xdb\x9e\x50\xe8\x10\xaa\x21\xea\x20\x4a\x53\x3f\x80\xe8\x20\x45\xbd\x24\x7a\x02\x7f\x08\x8e\xe5\x3d\x12\xa9\xee\xdc\x74\x90\x0d\x03\xa7\xb7\x6c\x56\x47\xc9\x4f\x3f\x10\x52\xa3\x24\xcf\x28\x15\x13\xbc\x82\xe5\x4d\xb9\xa2\x84\xa6\x1e\xb1\x05\xe3\xaa\xbe\x20\x37\x88\x24\x10\xc2\xab\x5f\x8d\x9a\x2e\xd9\x60\x53\xae\xe3\x65\x89\x0a\xe5\x73\x93\x88\x4f\x77\x44\xef\x88\x42\x4d\x14\xfb\xa3\x2a\xd5\x5c\xca\xc7\xb4\x05\x54\x6a\x66\xb3\x80\x9e\x9d\xa1\xea\x6d\x1c\xf9\xaa\x1e\x53\xff\xe3\xde\x4d\x20\xa7\xe2\x27\xcc\x21\x0a\xbf\xa6\x61\x58\x1a\x1f\x57\x86\x39\x69\x89\x44\x1e\x7c\x2a\xdd\xcf\x46\x8c\x60\x69\x8d\x17\xd6\xa1\x91\xbe\x89\x1f\x4c\xcd\xc9\xc2\x88\x5b\xdf\xdb\x2f\xc9\x23\x73\x0e\x8f\x53\xf3\xdf\xe3\xd9\xca\xc8\x7e\x8f\x3f\x1f\x7f\x4f\xc6\x93\xf7\x06\xbc\x39\x0b\x50\x98\x7f\x32\x8d\x07\x78\xfb\xa5\x03\xf1\x78\x66\x19\x8b\x13\x01\x67\xba\x3b\xc4\xff\xca\x9c\x4e\x2c\x97\x2a\xd4\xae\x66\x9a\xa7\xc7\xc6\x86\x1b\x04\x1e\xb3\x0f\xb8\xe2\x7e\xf4\x9d\xed\xe8\xf0\x48\x89\x50\xda\x98\x96\x7a\x03\xf7\xa7\x3c\x35\x18\x8c\x46\x15\x89\x1e\x87\x22\x0f\xef\x72\xb4\xd0\x64\x25\x8e\x7d\x03\x2d\xd4\xed\xad\x4f\xc0\xf7\x90\x42\x93\x67\xe7\xa5\x85\x0e\x2b\xaf\x45\x0c\x27\x82\xfd\x4e\x6a\xe8\xb0\x56\x25\x87\xa6\x0d\x2d\xf4\x90\xdb\x72\xb9\x92\x4d\x29\x22\xef\x5f\xef\x71\x2c\x99\xc2\x3a\x86\xbc\xbe\x0c\xd2\x4e\x06\xb5\xb2\x47\xd3\xcd\xf3\x0a\x6d\x6c\xcd\x4d\xb3\xde\x9f\x32\xad\xe9\x1d\x41\xfe\x8c\x9e\x08\x10\x34\xee\x2a\x54\xbd\x8b\x66\xa7\xd0\xd3\x0d\x8b\x3e\x46\xaf\x90\xb5\x4b\x51\x14\x9a\x96\x15\x73\x39\xd5\xa1\xc4\xba\x37\xaa\x7f\xfc\x7c\xf3\xdb\xef\x47\x16\xfe\xef\xff\xea\x78\xf8\xb7\xdf\xcb\x43\x1c\xfa\x82\xc4\xdd\xa0\xca\xd9\x99\x2e\x2e\x38\xb6\xb2\xfa\x51\x57\x55\x4d\x82\x8c\xf9\x48\xd6\x22\xe4\x8e\x8a\x32\xf7\x8b\xa4\xdc\xc5\x98\x0c\xf3\x87\x89\x39\xe9\xd1\x49\x6c\xf7\x3a\xef\x87\xe3\x32\x37\x67\x5d\xdd\x1d\x0e\xf2\x93\xf9\x6c\xf5\x68\x46\x29\x8d\x5e\xa8\x53\x94\x1c\x77\xfa\x99\x7a\xd7\x83\x5e\x03\xc5\x60\x34\x92\xe8\xda\x1e\x55\xaa\xc2\xe8\x67\x43\xd1\xd8\xac\x4e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\x11\x3c\xe1\xfe\x78\xad\x62\x2e\xad\xc5\x78\x6a\xb6\xa0\xad\x12\xde\x89\x09\x8c\x4b\x69\xfc\xf0\x90\xb3\xd6\xc7\x47\xf8\xb0\x98\x3e\x8e\x17\x5f\xe0\x5f\xc6\x17\xb8\x66\xce\xe9\x3d\xf8\x82\x48\x9b\x6c\xb6\x61\x6d\xf5\xb3\x13\xed\x3a\x1b\x50\x52\x48\x53\xf3\xc1\xf8\xfc\x82\x46\x15\xef\xcb\xe9\x83\xb9\x59\xdf\xb6\x56\xcb\xa9\xf9\x4f\x58\x6b\x89\x08\xd7\x89\xf0\x6d\xa5\x2f\xd4\x79\x1a\xb5\xb7\xb3\xb9\x19\xf7\xca\x5e\x3e\x96\x3b\x6c\x9d\x6b\x87\x86\x7a\x36\xe7\x0e\xea\xfa\xb9\x57\xea\xe5\xb7\xd5\xb6\x5d\x5b\xe3\x04\xc9\x7a\x7f\x58\xff\x5e\xb7\x57\xe6\xf4\xe3\x2a\xf5\xbe\xa4\x3b\x8f\x21\xbd\x76\x2b\xb8\x5f\xf7\x9a\x7d\x9b\xde\xa0\x35\x79\x7e\xa4\xd5\x73\xfa\xcc\x9c\xde\xde\x1e\xa7\xfa\xdb\xda\x8b\x82\x0e\x04\x22\x20\xc1\x45\x40\x24\x8a\xf3\x38\x1a\xfa\xdf\x8b\x60\x55\xd1\x64\x37\x7a\xeb\xfd\xd9\x01\x15\x75\xe7\x31\xa5\x77\x95\x05\x10\xf5\xee\xe5\x4f\xef\x45\x7c\xac\x18\xe8\x77\x6c\x6b\xbc\x65\xdc\xc1\x1d\x29\xdf\xab\x13\xc1\x49\x72\x79\x7e\x56\xd7\x3b\xad\xe5\x71\x64\x97\xfc\x45\xf6\x3e\x08\x9e\x00\xe4\xcc\xe1\x6f\x33\xd4\xed\x7e\x67\x0a\x12\x0a\x88\xf4\x45\x73\xf1\x79\xe8\xbd\xd5\x44\x27\x01\x45\x42\x1d\x5e\x27\x87\x23\x52\x99\x5d\x72\x5f\xc2\xf5\x3a\x3b\x9d\x87\x34\x93\xec\x0f\xe2\xa2\x35\x53\xb0\xf3\x12\x8a\x69\x56\x57\xba\xc5\xbf\x70\x0a\x2a\x1f\x0d\x3a\xb1\x94\x36\xf4\x47\x96\xfb\x86\xf3\x3a\x99\xc9\x7f\x34\xea\x82\x95\x93\xed\x8f\xa8\xee\xf3\xd4\xeb\x40\xab\xfd\x30\xd6\x85\xb1\x6e\x53\x7f\xb0\xe9\xa4\xf8\x3a\x00\xb3\x8b\x9e\x2e\x50\x8d\x93\x7f\x51\xf5\xf1\x8e\xfc\xe2\xdc\x50\x36\x55\x3b\x55\x9d\xca\x10\x45\xa5\xc5\x7b\xe4\x4b\x50\x44\x9b\xbd\x3e\x80\x8a\x3b\x4e\x03\x77\xa1\x9e\x59\xb5\xd2\x0b\x48\x5d\xe7\x8c\x87\x66\xbd\xbb\xd0\x34\x9e\x28\x6e\x18\x08\x5f\x38\x8f\x57\x13\xd2\x9c\x8f\xfc\xf8\x79\xf1\xe3\x52\x35\xf6\xe2\x49\x58\x4b\xea\x60\x36\x1b\xa5\xef\x92\x64\x2d\xc4\xd3\x79\x0a\xaa\xc5\x40\xe7\x08\x76\x7d\x9d\x7e\x17\x1b\xfe\xfa\x2b\x0c\x94\xf0\x1c\x42\x95\x42\x1d\x97\xe2\x60\x34\xd2\xb8\xd3\x37\x37\xb7\xd0\x2c\x68\x0b\xa7\x9f\x20\x53\x2a\x44\xd9\x2c\xba\x16\xa1\xbb\xd5\xbd\xcc\x17\x44\xdb\x1d\x28\x88\x96\x5c\xb8\x81\x4f\xef\x8d\x85\x71\x38\x4f\x70\x0f\x3f\xfd\x94\xcb\x5e\xd3\xbf\xf9\xc0\x16\x7e\xe0\xa1\xc6\x38\x13\xf9\x3f\x02\x3e\x88\x6f\xfc\xca\x91\x22\x80\xf8\x3f\x4e\xf5\xe5\x62\x53\x65\x53\x07\xef\x3a\x04\x8b\x07\xaa\x6d\x53\x8e\x23\x7a\x89\xf5\xd7\x9c\xb6\xb6\x36\x99\xb4\xaa\xda\x64\xb2\x37\x96\x4c\xe8\xff\x01\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\xca\xc2\x50\x0c\x46\xf7\x3c\x45\xc6\xff\x47\xfa\x04\x9d\xc4\x16\xe9\xd2\x4a\xb5\xe0\x76\x49\xdb\x8b\xcd\xe0\xcd\x25\x37\x20\x7d\x7b\x41\x07\x5b\xbb\xb8\x86\x8f\x73\x72\xb2\x0c\x77\x77\xbe\x29\x99\xc7\x2e\x02\x1c\xda\x72\x7f\x29\xb1\xaa\x8b\xf2\x8a\x93\x44\xd7\xcf\x6e\x12\x1e\xb1\xa9\x71\xe2\x64\xa2\xb3\x93\xe8\x95\x8c\x25\xb8\x48\x6a\x3c\x70\xa4\x60\x09\xbb\x73\x55\x1f\xb1\x37\xf5\x1e\xff\xb6\x5b\x1e\xff\xf3\x2f\xbc\xbd\xf1\xb6\xc6\x9b\x52\x48\x34\xfc\x28\x58\xae\x5f\x0a\x58\x26\x15\xf2\x08\x00\x45\xdb\x9c\xb6\x49\xf9\xea\xfe\xf9\x25\x87\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4d\x6b\xb3\x40\x14\x85\xf7\xf3\x2b\xce\x2e\xca\xfb\x66\x91\x6d\x5c\x4d\xc6\x1b\x22\x8c\x63\x3b\x5e\xdb\x64\x25\xa2\x43\x3a\x90\x6a\xeb\xd8\xaf\x7f\x5f\x48\xd3\x0f\x08\x6d\xa1\xcb\x73\x78\xe0\x39\xdc\x3b\x9f\xe3\xdf\xad\xdf\x8f\xcd\xe4\x50\xdd\x09\x65\x49\x32\xa1\xa4\xcb\x8a\x8c\x22\xdc\xf8\x30\x0d\xe3\x4b\xdd\xb4\xed\xf0\xd0\x4f\xa1\xf6\x5d\x1d\xdc\xbd\x00\x80\x92\xa5\x65\x5c\x67\xbc\xc1\xe2\x58\x64\x46\x59\xca\xc9\x30\x56\xbb\x53\x65\x0a\xe4\x99\xb9\x92\xba\xa2\x8f\x2c\xb7\x9f\x59\x49\xb5\x21\x2c\x12\x51\x92\x26\xc5\x08\x6e\x7a\x6c\x0e\xd1\xec\x1b\xef\xec\x3f\xa2\x13\x99\xcb\x6d\xe4\xbb\x18\x6b\x5b\xe4\x67\x33\xe3\x38\x11\x52\x33\x59\xb0\x5c\x69\x42\x61\xf4\xee\x0c\xc2\x1b\xa1\x0a\x5d\xe5\x06\xbe\x43\x49\x8c\x94\xd6\xb2\xd2\x8c\xde\x3d\xff\xbc\x64\xb9\x1c\xdd\xbe\x3d\x34\x21\xc4\x89\x10\x5f\xcf\x98\x0e\x4f\xfd\x1f\xec\xa9\x2d\x2e\xde\xf5\x89\x38\xa6\xdf\xde\x90\x88\xd7\x00\x00\x00\xff\xff\x55\xe2\xdd\x2c\xbf\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 447, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_add_protocol_versionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xef\x52\x70\xef\x14\x4d\x9d\xce\x44\x4a\x32\x38\x15\xd1\xa3\x06\x6a\xae\x5c\x82\xe2\xdb\xbb\xba\x88\x4f\xf0\x75\x1d\x36\x8f\x3c\xeb\xa5\x31\xd2\x6a\x2c\xc5\x61\x44\xb4\x3b\x1a\x10\x3c\x9d\x71\xcf\xb5\x89\xbe\xa7\x85\x6f\x33\x6b\x85\x01\xac\x73\xd8\x07\x4a\x47\x8f\x55\xa5\xc9\x55\x96\xe9\xc9\x5a\xb3\x14\xe4\xd2\x78\x66\x85\x1b\x0e\x36\x51\xc4\x16\x3e\x44\xf8\x44\xd4\x1b\xf3\x6d\x39\x79\x95\xff\x9a\x1b\xc3\xe9\x97\xd5\x9b\x4f\x00\x00\x00\xff\xff\x83\xbb\x30\x2e\xbc\x00\x00\x00")

func migrations4_add_protocol_versionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_add_protocol_versionSql,
		"migrations/4_add_protocol_version.sql",
	)
}

func migrations4_add_protocol_versionSql() (*asset, error) {
	bytes, err := migrations4_add_protocol_versionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_add_protocol_version.sql", size: 188, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_create_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x51\x6f\xaa\x40\x10\x85\xdf\xf9\x15\x13\x9f\x30\x17\x93\x7b\x6f\x5a\x5f\x4c\x9a\x58\x25\xad\xa9\xc1\xd6\x4a\xd2\x37\xb2\xb0\x23\x6c\xa2\x2c\x99\x1d\xda\xf0\xef\x1b\x68\x69\x10\x57\xad\xaf\x9c\x39\x67\x38\xbb\x5f\x76\x34\x82\x3f\x7b\x95\x92\x60\x84\xb0\x70\x66\x6b\x7f\xba\xf1\x61\x33\xbd\x5f\xfa\x90\x29\xc3\x9a\xaa\x88\x49\x48\x34\xe0\x3a\x00\xf0\xf3\x51\x17\x48\x82\x95\xce\x23\x25\x21\x56\xa9\xca\x19\x82\xd5\x06\x82\x70\xb9\xf4\x9a\xc9\x81\x26\x89\x34\x00\x95\x33\xa6\x48\x1d\xb5\x91\xf5\x76\x8b\x64\x35\x37\xb2\xc1\xdd\xee\x84\x5e\xcb\x71\x59\x9d\x75\xeb\x9d\x8c\x84\x31\xc8\x11\x57\x05\x42\x92\x09\x12\x09\x23\xc1\xbb\xa0\x4a\xe5\xa9\x3b\xbe\x19\xf6\x22\x3b\x1e\x65\x4c\x89\x64\x71\xdd\x8e\xcf\xb8\x12\x2d\x6d\x9b\xfe\xfd\xb7\x7b\xf6\xba\xcc\xb9\xff\xff\x30\x7b\xf4\x67\x4f\xe0\x76\x47\xee\xe0\xef\xf0\xbb\x57\xac\xcb\x34\xe3\x6b\x9b\x1d\xb8\xae\xe8\x76\xe0\xfb\x75\xbb\xd6\x75\xb6\xdf\xe1\x50\xdd\xd0\x19\x4e\x9c\x96\xbf\x30\x58\xbc\x84\x3e\x2c\x82\xb9\xff\x06\x19\x93\x8c\x0a\x25\x61\x15\xf4\x91\x0c\x5f\x17\xc1\x03\xc4\x4c\x88\xe0\xda\xc8\xf4\x5a\x0a\x3b\xe1\x9d\xd4\xb8\x8a\x1a\x0c\x2f\x45\xb7\xac\xda\x52\xea\x90\xfa\xb6\x2e\x65\xf4\x90\xf4\xfa\xe4\x78\xc7\x00\x9e\x5a\xf7\x75\x78\x97\x16\x1e\xb1\xe2\x1d\x5f\xa8\x67\x63\xa3\x5e\xdb\x7d\x17\xe6\xfa\x23\x77\xe6\xeb\xd5\xb3\xfd\x5d\x48\x84\x49\x84\xc4\x89\xf3\x19\x00\x00\xff\xff\x79\x87\x24\x6b\x4c\x04\x00\x00")

func migrations5_create_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_create_trades_tableSql,
		"migrations/5_create_trades_table.sql",
	)
}

func migrations5_create_trades_tableSql() (*asset, error) {
	bytes, err := migrations5_create_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_create_trades_table.sql", size: 1100, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_create_assets_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3d\x4f\xc3\x30\x18\x84\x77\xff\x8a\x1b\x1d\x91\x0e\x20\xe8\x92\xc9\x34\x16\x58\x18\xa7\xb8\x31\xa2\x53\xe5\x26\x16\x78\x80\x54\xb6\x11\xca\xbf\x47\xaa\x28\xf9\x50\xe6\x7b\xf4\xbc\xef\xdd\x6a\x85\xab\x4f\xff\x1e\x6c\x72\x30\x27\xb2\xd1\x9c\xd5\x1c\x35\xbb\x97\x1c\x1f\x3e\xa6\x2e\xf4\x07\x1b\xa3\x4b\x11\x94\x00\x80\x6f\xb1\xe3\x5a\x30\x89\xad\x16\xcf\x4c\xef\xf1\xc4\xf7\xc8\xcf\xd9\x19\x3c\xa4\xfe\xe4\xf0\xca\xf4\xe6\x91\x69\xba\xbe\xcd\xa0\xaa\x1a\xca\x48\x39\x86\x9a\xae\x1d\xa0\xeb\x9b\x65\xc8\xc7\xf8\xed\xc2\x3f\x76\xb7\x9e\x63\x46\x89\x17\xc3\xe9\xa0\xcc\x47\x3f\xe4\x13\x4b\x46\xb2\x82\x5c\xfa\x09\x55\xf2\xb7\xbf\xf8\xd8\x5f\xee\x54\x6a\x5e\xd9\xec\x84\x7a\xc0\x31\x05\xe7\x40\x27\xb6\x82\x90\xf1\x74\x65\xf7\xf3\x45\x4a\x5d\x6d\x97\xa7\x6b\x6c\x6c\x6c\xeb\x8a\xdf\x00\x00\x00\xff\xff\xfb\x53\x3e\x81\x6e\x01\x00\x00")

func migrations6_create_assets_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_create_assets_tableSql,
		"migrations/6_create_assets_table.sql",
	)
}

func migrations6_create_assets_tableSql() (*asset, error) {
	bytes, err := migrations6_create_assets_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_create_assets_table.sql", size: 366, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_modify_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x8f\xda\x30\x14\xbc\xe7\x57\x3c\xed\x29\x51\xc3\xaa\xad\xda\xbd\x6c\x55\x09\x58\x97\x46\x65\xc3\x36\x04\xa9\xb7\xc8\x89\xdf\x06\xab\xc1\x8e\x6c\xa7\x88\x7f\x5f\x05\x08\xcd\x27\xb0\xbb\x87\x5e\x93\x99\x79\x6f\xec\xf1\x8c\x46\xf0\x6e\xc3\x53\x45\x0d\xc2\x2a\xb7\x46\x23\x60\x4a\xe6\x60\xd6\x08\x32\x63\x60\x14\x65\xa8\xc1\xd0\x38\xc3\x5b\xc8\x0b\x03\x14\x04\x6e\x41\x0a\x04\x2e\x20\xcf\x68\x82\xd6\x43\xb0\x78\x82\x70\x3c\x99\x13\x58\x73\x6d\xa4\xda\x45\x07\xde\xbd\x35\x0d\xc8\x38\x24\xbd\x3f\xc1\xb6\x00\xe0\xf4\x51\xe6\xa8\xa8\xe1\x52\x44\x9c\xc1\xc4\x9b\x79\x7e\x08\xfe\x22\x04\x7f\x35\x9f\xbb\x7b\xe4\x8d\x54\x0c\xd5\x0d\x78\x7e\x48\x66\x24\x68\xfd\xcd\x90\xa5\xa8\xa2\x24\x93\x1a\x59\x44\x0d\x84\xde\x23\x59\x86\xe3\xc7\xa7\x16\x50\x3e\x3f\xa3\x1a\x1c\x12\x53\x8d\x11\x4d\x12\x59\x08\xd3\x03\x82\x80\x7c\x23\x01\xf1\xa7\x64\x79\xda\xfc\x88\xd6\x36\x67\x4e\x5d\x44\x6b\xbc\x5a\xa2\xc4\x76\x04\x36\xa5\x6c\x87\x3e\xfd\x4e\xa6\x3f\xc0\xae\x43\xbe\xc2\xfb\x23\x71\xbf\x09\xaa\x37\x3b\x38\xe9\xbc\xc1\xc4\x49\xe3\xac\x8f\x16\xea\x9f\x95\xbd\x41\xae\x23\x8d\x59\x86\x0a\x26\x8b\xc5\x9c\x8c\xfd\xc3\xbf\x3d\xd7\x6e\x1e\xf3\x97\xce\xd2\x8e\xe5\xdc\x5b\x55\x04\x57\xbe\xf7\x73\x45\xc0\xf3\x1f\xc8\x2f\x58\x1b\xc5\xa2\x9c\x33\x58\xf8\xed\x54\xae\x96\x9e\x3f\x83\xd8\x28\x44\xb0\xfb\xc2\xe9\x56\x41\x74\x4e\xf1\xae\x8b\x52\xae\x22\xc3\x37\x18\x65\x52\xfe\x2e\xf2\xc1\x09\x93\x30\x20\xa4\x69\xc1\xed\x38\x70\x3b\xb1\xee\x1d\x5a\xd1\xae\x1a\xd9\x39\xa5\x3e\xc5\xeb\x1d\x5c\xb5\x60\xbc\x8b\xf6\xcf\xee\xd2\x79\x57\x6f\xb3\xbc\x37\xab\x5e\x4d\x0f\x72\x2b\x1a\xe5\x24\x70\x8b\xaa\xea\x25\x85\x5c\x68\x53\xe2\xaa\xde\x92\x02\x6f\x87\x7b\x09\x12\xaa\x13\xca\xf0\xd5\xfd\x14\xf3\x94\x0b\x33\xd0\x4f\x5c\x18\x4c\x51\x0d\xd5\x4e\x2f\xf7\x10\xf2\xc1\xdf\x71\xb1\x3b\x47\x96\x19\x3b\x5e\xa7\xd9\xe5\x08\xc9\x9a\x2a\x9a\x18\x54\xf0\x87\xaa\x1d\x17\xa9\x7d\xf7\xc9\x19\xe6\x70\xad\x0b\x54\x3d\xac\xcf\x77\x67\x58\x89\x64\x7d\x93\x3e\x7c\xec\xe7\x1c\x5e\x77\x6b\xfd\xaa\x03\xea\x90\x5a\x01\xc8\x22\x5d\x9b\x97\x1a\x6b\xb0\x5e\x60\xad\xc1\xbb\xda\x5c\xc5\x3a\x6b\xaf\x09\x2a\x0d\xfe\x87\x62\x7a\xc5\x13\x6c\x8b\x94\x1a\xe5\x55\x5d\x92\x68\xe5\xd1\x6d\xc7\xc6\xed\xa6\x6f\x60\xda\xe1\xe4\x2e\xcd\xeb\x04\xc5\xed\xde\xa6\xdb\x17\x0c\xe7\xfe\x6f\x00\x00\x00\xff\xff\x2a\xff\xe8\x4a\xff\x08\x00\x00")

func migrations7_modify_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_modify_trades_tableSql,
		"migrations/7_modify_trades_table.sql",
	)
}

func migrations7_modify_trades_tableSql() (*asset, error) {
	bytes, err := migrations7_modify_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_modify_trades_table.sql", size: 2303, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_add_aggregatorsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x31\x6f\xdb\x30\x14\x84\x77\xfe\x8a\x1b\x34\xd8\xa8\x65\xa3\x1d\x1b\x78\xa0\x65\x5a\x10\x40\x2b\xae\x48\x0d\x99\x02\x26\x61\x64\xa1\x32\xa5\x92\xcf\x30\xfc\xef\x0b\xaa\x4d\x6c\xb4\x05\x1a\x14\xcd\x46\x1c\xf8\x0e\x77\xdf\x7b\x69\x8a\x0f\x87\xb6\xf1\x86\x2c\xea\x81\xb1\x34\xc5\x9e\x68\x08\x9f\x17\x8b\x53\xfb\xb5\x9d\x0f\x7d\xa0\xc6\xdb\xf0\xad\x9b\xf7\xbe\x19\xb5\xc5\xa6\xf5\x81\x16\x9d\x09\x74\x3f\x31\x4d\xe3\x6d\x63\xc8\x4e\xe3\x68\xe6\x6d\x34\x32\x78\x3e\xba\x47\x6a\x7b\x07\xda\x1b\x82\xe9\x4e\xe6\x1c\xe0\x2d\x1d\xbd\x0b\xa0\xbd\xc5\x73\xf4\x80\xeb\x5d\x5a\xd6\x52\xa2\x25\x7b\x60\x59\x25\xb8\x16\xd8\xd4\x65\xa6\x8b\xdb\x12\xc3\xf1\xa1\x6b\x1f\xe7\xe3\xd7\x7b\xd3\x34\x98\xc0\xb8\xb3\xed\xec\xc1\x3a\x9a\x5d\xbd\x31\x65\x40\x25\x74\x5d\x95\xea\x5a\x96\xbc\xcc\x6b\x9e\x0b\xa8\x2f\x12\xc5\x76\x5b\x6b\xbe\x92\x02\x4a\x57\x45\xa6\xc1\x15\x92\x04\x4a\x48\x91\x69\x24\x1f\x91\x24\x37\x63\x7f\xee\x9e\x62\x44\x87\x93\x37\x03\x8c\xc3\x6b\x47\x18\xdf\x1f\xdd\x13\x5a\x7a\xc9\xca\xf3\xbc\x12\x79\x7c\xfd\x0c\xbb\x29\x2a\xa5\x31\x61\x2a\xb6\xc0\x12\xbb\x7a\x25\x8b\xec\xd2\x61\xc6\x56\x5c\x09\x7d\xb7\x13\x58\x82\x97\x77\x42\x8a\xad\x28\xf5\x8c\xa9\xdf\x34\x36\xfd\x91\xe7\xed\x50\xe3\x4a\xde\xc6\x74\x5c\xde\x7b\x23\xfd\xf4\x7f\x90\x4a\x3e\x12\x0d\xb1\x3e\x00\x2c\x7f\x2d\x31\x63\x0f\x26\x58\x3a\x0f\x16\xcb\xeb\x3a\x2c\x8c\xda\x38\x72\x91\x5f\xb0\xbe\x9e\xfd\xba\x3f\x39\xb6\xae\x6e\x77\xff\x74\x79\xc8\xb8\xca\xf8\x5a\xdc\xfc\xd9\xe2\x02\xfa\xaf\x06\xdf\x03\x00\x00\xff\xff\x7e\x17\x8e\x03\x8b\x03\x00\x00")

func migrations8_add_aggregatorsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_add_aggregatorsSql,
		"migrations/8_add_aggregators.sql",
	)
}

func migrations8_add_aggregatorsSql() (*asset, error) {
	bytes, err := migrations8_add_aggregatorsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_add_aggregators.sql", size: 907, mode: os.FileMode(420), modTime: time.Unix(1510337983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
	"migrations/4_add_protocol_version.sql": migrations4_add_protocol_versionSql,
	"migrations/5_create_trades_table.sql": migrations5_create_trades_tableSql,
	"migrations/6_create_assets_table.sql": migrations6_create_assets_tableSql,
	"migrations/7_modify_trades_table.sql": migrations7_modify_trades_tableSql,
	"migrations/8_add_aggregators.sql": migrations8_add_aggregatorsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
		"4_add_protocol_version.sql": &bintree{migrations4_add_protocol_versionSql, map[string]*bintree{}},
		"5_create_trades_table.sql": &bintree{migrations5_create_trades_tableSql, map[string]*bintree{}},
		"6_create_assets_table.sql": &bintree{migrations6_create_assets_tableSql, map[string]*bintree{}},
		"7_modify_trades_table.sql": &bintree{migrations7_modify_trades_tableSql, map[string]*bintree{}},
		"8_add_aggregators.sql": &bintree{migrations8_add_aggregatorsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

